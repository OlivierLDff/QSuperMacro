#
#	QSuperMacros CMake script by Olivier Le Doeuff

#
## CMAKE INPUT
#
#	- QSUPER_MACROS_TARGET : Name of the library target. Default : "QSuperMacros"
#	- QSUPER_MACROS_PROJECT : Name of the project. Default : "QSuperMacros"
#	- QSUPER_MACROS_BUILD_SHARED : Build shared library [ON OFF]. Default: OFF.
#	- QSUPER_MACROS_BUILD_STATIC : Build static library [ON OFF]. Default: ON.
#	- QSUPER_MACROS_USE_NAMESPACE : If the library compile with a namespace. Default: OFF.
#	- QSUPER_MACROS_NAMESPACE : Namespace for the library. Only relevant if QSUPER_MACROS_USE_NAMESPACE is ON. Default: "Qsm".
#	- QSUPER_MACROS_BUILD_DOC : Build the QSuperMacros Doc [ON OFF]. Default: OFF.
#	- QSUPER_MACROS_DOXYGEN_BT_REPOSITORY : Repository of DoxygenBt. Default : "https://github.com/OlivierLDff/DoxygenBootstrapped.git"
#	- QSUPER_MACROS_DOXYGEN_BT_TAG : Git Tag of DoxygenBt. Default : "v1.3.1"

#
## NAMING CONVENTION
#
#	- QSUPER_MACROS_USE_QT_PREFIX : Use Qt-ish internal attribute prefix m_attribute [ON OFF]. Default = OFF.
#	- QSUPER_MACROS_USE_QT_GETTERS : Use Qt-ish Getter naming convention attribute() [ON OFF]. Default = OFF.
#	- QSUPER_MACROS_USE_QT_SETTERS : Use Qt-ish Setter naming convention setAttribute [ON OFF]. Default = OFF.
#	- QSUPER_MACROS_USE_QT_RESETS : Use Qt-ish Setter naming convention resetAttribute [ON OFF]. Default = OFF.
#	- QSUPER_MACROS_USE_QT_SIGNALS : Use Qt-ish signal naming convention attributeChanged. It is really recommended to leave this option ON because QML Connections don't handle signals starting with Capital Letter [ON OFF]. Default = ON.

#
## CMAKE OUTPUT
#
#	- QSUPER_MACROS_TARGET : Output target to link to. Default: QSuperMacros
#	- QSUPER_MACROS_VERSION : Version of QSuperMacros
#

#
## VERSION
#	- 1.0.0 : 06/12/2018 : Initial Work
#	- 1.1.0 : 12/12/2018 : Reset functions

# ┌──────────────────────────────────────────────────────────────────┐
# │						  CMAKE PROPERTIES							 │
# └──────────────────────────────────────────────────────────────────┘

CMAKE_MINIMUM_REQUIRED( VERSION 3.1.0 )

# ┌──────────────────────────────────────────────────────────────────┐
# │						  PROJECT SETTINGS							 │
# └──────────────────────────────────────────────────────────────────┘

SET( QSUPER_MACROS_TARGET "QSuperMacros" CACHE STRING "Target Name" )
SET( QSUPER_MACROS_PROJECT "QSuperMacros" CACHE STRING "Project Name")
SET( QSUPER_MACROS_BUILD_SHARED OFF CACHE BOOL "Build shared lib for QSuperMacros" )
IF(NOT QSUPER_MACROS_BUILD_SHARED)
SET( QSUPER_MACROS_BUILD_STATIC ON CACHE BOOL "Build static lib for QSuperMacros" )
ELSE(NOT QSUPER_MACROS_BUILD_SHARED)
SET( QSUPER_MACROS_BUILD_STATIC OFF CACHE BOOL "Build static lib for QSuperMacros" )
ENDIF(NOT QSUPER_MACROS_BUILD_SHARED)
SET( QSUPER_MACROS_USE_NAMESPACE OFF CACHE BOOL "If the library compile with a namespace.")
SET( QSUPER_MACROS_NAMESPACE "Qsm" CACHE STRING "Namespace for the library. Only relevant if QSUPER_MACROS_USE_NAMESPACE is ON")

SET( QSUPER_MACROS_BUILD_DOC OFF CACHE BOOL "Build QSuperMacros Doc with Doxygen" )
IF(QSUPER_MACROS_BUILD_DOC)
SET( QSUPER_MACROS_DOXYGEN_BT_REPOSITORY "https://github.com/OlivierLDff/DoxygenBootstrappedCMake.git" CACHE STRING "Repository of DoxygenBt" )
SET( QSUPER_MACROS_DOXYGEN_BT_TAG v1.3.2 CACHE STRING "Git Tag of DoxygenBt" )
ENDIF(QSUPER_MACROS_BUILD_DOC)

SET( QSUPER_MACROS_USE_QT_PREFIX OFF CACHE BOOL "Use Qt-ish internal attribute prefix m_attribute [ON OFF]" )
SET( QSUPER_MACROS_USE_QT_GETTERS OFF CACHE BOOL "Use Qt-ish Getter naming convention attribute() [ON OFF]" )
SET( QSUPER_MACROS_USE_QT_SETTERS OFF CACHE BOOL "Use Qt-ish Setter naming convention setAttribute [ON OFF]" )
SET( QSUPER_MACROS_USE_QT_RESETS OFF CACHE BOOL "Use Qt-ish Reset naming convention resetAttribute [ON OFF]" )
SET( QSUPER_MACROS_USE_QT_SIGNALS ON CACHE BOOL "Use Qt-ish signal naming convention attributeChanged. It is really recommended to leave this option ON because QML Connections don't handle signals starting with Capital Letter [ON OFF]" )

PROJECT( ${QSUPER_MACROS_PROJECT} )
SET_PROPERTY(GLOBAL PROPERTY USE_FOLDERS ON)

# ┌──────────────────────────────────────────────────────────────────┐
# │						  	QT5 CMAKE 								 │
# └──────────────────────────────────────────────────────────────────┘

# Find includes in corresponding build directories
SET( CMAKE_INCLUDE_CURRENT_DIR ON )
# Instruct CMake to run moc automatically when needed
SET( CMAKE_AUTOMOC ON )
 # https://cmake.org/cmake/help/v3.0/prop_tgt/AUTORCC.html#prop_tgt:AUTORCC
SET( CMAKE_AUTORCC ON )
#required by Qt5
set (CMAKE_CXX_STANDARD 11) 

# Find correct qt directory
IF( QT_DIR )
	SET( CMAKE_PREFIX_PATH "${CMAKE_PREFIX_PATH};${QT_DIR}" )
ENDIF( QT_DIR )

FIND_PACKAGE(Qt5Core REQUIRED)
FIND_PACKAGE(Qt5Qml REQUIRED)

# ┌──────────────────────────────────────────────────────────────────┐
# │						  VERSION 	 								 │
# └──────────────────────────────────────────────────────────────────┘

# Project version must be set here
SET(QSUPER_MACROS_VERSION_MAJOR 1)
SET(QSUPER_MACROS_VERSION_MINOR 1)
SET(QSUPER_MACROS_VERSION_PATCH 1)
SET(QSUPER_MACROS_VERSION ${QSUPER_MACROS_VERSION_MAJOR}.${QSUPER_MACROS_VERSION_MINOR}.${QSUPER_MACROS_VERSION_PATCH} CACHE STRING "Version")

IF( EXISTS "${CMAKE_SOURCE_DIR}/.git" )
	EXECUTE_PROCESS(
		COMMAND git describe --always
		WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}
		OUTPUT_VARIABLE QSUPER_MACROS_VERSION_TAG
		OUTPUT_STRIP_TRAILING_WHITESPACE
	)
ELSE()
	SET( QSUPER_MACROS_VERSION_TAG 00000000 )
ENDIF()
SET( QSUPER_MACROS_VERSION_TAG_HEX 0x${QSUPER_MACROS_VERSION_TAG})

# ┌──────────────────────────────────────────────────────────────────┐
# │						  STATUS 	 								 │
# └──────────────────────────────────────────────────────────────────┘

MESSAGE( STATUS  "------ ${QSUPER_MACROS_TARGET} Configuration v${QSUPER_MACROS_VERSION} ------" )

MESSAGE( STATUS "QSUPER_MACROS_TARGET                 : ${QSUPER_MACROS_TARGET}" )
MESSAGE( STATUS "QSUPER_MACROS_PROJECT                : ${QSUPER_MACROS_PROJECT}" )
MESSAGE( STATUS "QSUPER_MACROS_VERSION                : ${QSUPER_MACROS_VERSION}" )
MESSAGE( STATUS "QSUPER_MACROS_VERSION_TAG_HEX        : ${QSUPER_MACROS_VERSION_TAG_HEX}" )
MESSAGE( STATUS "QSUPER_MACROS_BUILD_SHARED           : ${QSUPER_MACROS_BUILD_SHARED}" )
MESSAGE( STATUS "QSUPER_MACROS_BUILD_STATIC           : ${QSUPER_MACROS_BUILD_STATIC}" )
MESSAGE( STATUS "QSUPER_MACROS_USE_NAMESPACE          : ${QSUPER_MACROS_USE_NAMESPACE}" )
IF(QSUPER_MACROS_USE_NAMESPACE)
MESSAGE( STATUS "QSUPER_MACROS_NAMESPACE              : ${QSUPER_MACROS_NAMESPACE}" )
ENDIF(QSUPER_MACROS_USE_NAMESPACE)
MESSAGE( STATUS "QSUPER_MACROS_BUILD_DOC              : ${QSUPER_MACROS_BUILD_DOC}" )
IF(QSUPER_MACROS_BUILD_DOC)
MESSAGE( STATUS "QSUPER_MACROS_DOXYGEN_BT_REPOSITORY  : ${QSUPER_MACROS_DOXYGEN_BT_REPOSITORY}" )
MESSAGE( STATUS "QSUPER_MACROS_DOXYGEN_BT_TAG         : ${QSUPER_MACROS_DOXYGEN_BT_TAG}" )
ENDIF(QSUPER_MACROS_BUILD_DOC)
MESSAGE( STATUS "QSUPER_MACROS_USE_QT_PREFIX          : ${QSUPER_MACROS_USE_QT_PREFIX}" )
MESSAGE( STATUS "QSUPER_MACROS_USE_QT_GETTERS         : ${QSUPER_MACROS_USE_QT_GETTERS}" )
MESSAGE( STATUS "QSUPER_MACROS_USE_QT_SETTERS         : ${QSUPER_MACROS_USE_QT_SETTERS}" )
MESSAGE( STATUS "QSUPER_MACROS_USE_QT_RESETS          : ${QSUPER_MACROS_USE_QT_RESETS}" )
MESSAGE( STATUS "QSUPER_MACROS_USE_QT_SIGNALS         : ${QSUPER_MACROS_USE_QT_SIGNALS}" )

MESSAGE( STATUS "------ ${QSUPER_MACROS_TARGET} End Configuration ------" )

IF((QSUPER_MACROS_BUILD_SHARED AND QSUPER_MACROS_BUILD_STATIC) OR (NOT QSUPER_MACROS_BUILD_SHARED AND NOT QSUPER_MACROS_BUILD_STATIC))
MESSAGE( FATAL_ERROR "Set either Build shared or build static to ON, can't build both at once" )
ENDIF((QSUPER_MACROS_BUILD_SHARED AND QSUPER_MACROS_BUILD_STATIC) OR (NOT QSUPER_MACROS_BUILD_SHARED AND NOT QSUPER_MACROS_BUILD_STATIC))

# ┌──────────────────────────────────────────────────────────────────┐
# │						  SOURCES 	 								 │
# └──────────────────────────────────────────────────────────────────┘

SET( QSUPER_MACROS_SRCS 
	# Main
	${CMAKE_CURRENT_SOURCE_DIR}/src/QQmlAutoPropertyHelpers.h
	${CMAKE_CURRENT_SOURCE_DIR}/src/QQmlConstRefPropertyHelpers.h
	${CMAKE_CURRENT_SOURCE_DIR}/src/QQmlEnumClassHelper.h
	${CMAKE_CURRENT_SOURCE_DIR}/src/QQmlHelpersCommon.h
	${CMAKE_CURRENT_SOURCE_DIR}/src/QQmlListPropertyHelper.h
	${CMAKE_CURRENT_SOURCE_DIR}/src/QQmlPtrPropertyHelpers.h
	${CMAKE_CURRENT_SOURCE_DIR}/src/QQmlSingletonHelper.h
	${CMAKE_CURRENT_SOURCE_DIR}/src/QQmlVarPropertyHelpers.h
	${CMAKE_CURRENT_SOURCE_DIR}/src/QSuperMacros.h
	${CMAKE_CURRENT_SOURCE_DIR}/src/QSuperMacros.cpp
	)

# ┌──────────────────────────────────────────────────────────────────┐
# │						  TARGET 	 								 │
# └──────────────────────────────────────────────────────────────────┘

IF(QSUPER_MACROS_BUILD_SHARED)
	IF( MSVC )
	INCLUDE (GenerateExportHeader)
	ENDIF( MSVC )

	ADD_LIBRARY( ${QSUPER_MACROS_TARGET} SHARED ${QSUPER_MACROS_SRCS} )

	IF( MSVC )
	GENERATE_EXPORT_HEADER( ${QSUPER_MACROS_TARGET}
		BASE_NAME ${QSUPER_MACROS_TARGET}
		EXPORT_MACRO_NAME ${QSUPER_MACROS_TARGET}_EXPORT
		EXPORT_FILE_NAME ${QSUPER_MACROS_TARGET}_Export.h
		STATIC_DEFINE ${QSUPER_MACROS_TARGET}_BUILT_AS_STATIC
	)
	ENDIF( MSVC )
	
	TARGET_COMPILE_DEFINITIONS( ${QSUPER_MACROS_TARGET} PRIVATE -DQSUPER_MACROS_SHARED )

ELSE()
	ADD_LIBRARY( ${QSUPER_MACROS_TARGET} STATIC ${QSUPER_MACROS_SRCS} )
	TARGET_COMPILE_DEFINITIONS( ${QSUPER_MACROS_TARGET} PUBLIC -DQSUPER_MACROS_STATIC )
ENDIF()

TARGET_INCLUDE_DIRECTORIES( ${QSUPER_MACROS_TARGET} PUBLIC ${CMAKE_CURRENT_SOURCE_DIR}/src )
TARGET_COMPILE_DEFINITIONS( ${QSUPER_MACROS_TARGET} PRIVATE -DQSUPER_MACROS_VERSION_MAJOR=${QSUPER_MACROS_VERSION_MAJOR} )
TARGET_COMPILE_DEFINITIONS( ${QSUPER_MACROS_TARGET} PRIVATE -DQSUPER_MACROS_VERSION_MINOR=${QSUPER_MACROS_VERSION_MINOR} )
TARGET_COMPILE_DEFINITIONS( ${QSUPER_MACROS_TARGET} PRIVATE -DQSUPER_MACROS_VERSION_PATCH=${QSUPER_MACROS_VERSION_PATCH} )
TARGET_COMPILE_DEFINITIONS( ${QSUPER_MACROS_TARGET} PRIVATE -DQSUPER_MACROS_VERSION_TAG=${QSUPER_MACROS_VERSION_TAG} )
TARGET_COMPILE_DEFINITIONS( ${QSUPER_MACROS_TARGET} PRIVATE -DQSUPER_MACROS_VERSION_TAG_HEX=${QSUPER_MACROS_VERSION_TAG_HEX} )

IF(QSUPER_MACROS_USE_NAMESPACE)
TARGET_COMPILE_DEFINITIONS( ${QSUPER_MACROS_TARGET} PUBLIC -DQSUPER_MACROS_USE_NAMESPACE )
TARGET_COMPILE_DEFINITIONS( ${QSUPER_MACROS_TARGET} PUBLIC -DQSUPER_MACROS_NAMESPACE=${QSUPER_MACROS_NAMESPACE} )
ENDIF(QSUPER_MACROS_USE_NAMESPACE)

IF(QSUPER_MACROS_USE_QT_PREFIX)
	TARGET_COMPILE_DEFINITIONS( ${QSUPER_MACROS_TARGET} PUBLIC -DQSUPER_MACROS_USE_QT_PREFIX )
ENDIF(QSUPER_MACROS_USE_QT_PREFIX)
IF(QSUPER_MACROS_USE_QT_GETTERS)
	TARGET_COMPILE_DEFINITIONS( ${QSUPER_MACROS_TARGET} PUBLIC -DQSUPER_MACROS_USE_QT_GETTERS )
ENDIF(QSUPER_MACROS_USE_QT_GETTERS)
IF(QSUPER_MACROS_USE_QT_SETTERS)
	TARGET_COMPILE_DEFINITIONS( ${QSUPER_MACROS_TARGET} PUBLIC -DQSUPER_MACROS_USE_QT_SETTERS )
ENDIF(QSUPER_MACROS_USE_QT_SETTERS)
IF(QSUPER_MACROS_USE_QT_RESETS)
	TARGET_COMPILE_DEFINITIONS( ${QSUPER_MACROS_TARGET} PUBLIC -DQSUPER_MACROS_USE_QT_RESETS )
ENDIF(QSUPER_MACROS_USE_QT_RESETS)
IF(QSUPER_MACROS_USE_QT_SIGNALS)
	TARGET_COMPILE_DEFINITIONS( ${QSUPER_MACROS_TARGET} PUBLIC -DQSUPER_MACROS_USE_QT_SIGNALS )
ENDIF(QSUPER_MACROS_USE_QT_SIGNALS)

qt5_use_modules( ${QSUPER_MACROS_TARGET} Core Qml )

# ┌──────────────────────────────────────────────────────────────────┐
# │						  DOXYGEN 									 │
# └──────────────────────────────────────────────────────────────────┘

IF(QSUPER_MACROS_BUILD_DOC)
SET( DOXYGEN_BOOTSTRAP_COMPANY OlivierLDff )
SET( DOXYGEN_BOOTSTRAP_PUBLISHER OlivierLDff )
SET( DOXYGEN_BOOTSTRAP_PROJECT_NAME ${QSUPER_MACROS_TARGET} )
SET( DOXYGEN_BOOTSTRAP_PROJECT_VERSION ${QSUPER_MACROS_VERSION} )
SET( DOXYGEN_BOOTSTRAP_PROJECT_BRIEF "Additional data models aimed to bring more power to QML applications by using useful C++ models in back-end." )
SET( DOXYGEN_BOOTSTRAP_PROJECT_LOGO )
SET( DOXYGEN_BOOTSTRAP_OUTPUT_DIRECTORY "Docs" )
SET( DOXYGEN_BOOTSTRAP_SRC_DIRS ${CMAKE_CURRENT_SOURCE_DIR}/src )
SET( DOXYGEN_BOOTSTRAP_README ${CMAKE_CURRENT_SOURCE_DIR}/README.md )
SET( DOXYGEN_TARGET_PREFIX "" )
SET( DOXYGEN_TARGET_SUFFIX "Doc" )
SET( DOXYGEN_BT_REPOSITORY ${QSUPER_MACROS_DOXYGEN_BT_REPOSITORY} )
SET( DOXYGEN_BT_TAG ${QSUPER_MACROS_DOXYGEN_BT_TAG} )
INCLUDE(${CMAKE_CURRENT_SOURCE_DIR}/cmake/BuildDoxygenBt.cmake)
ENDIF(QSUPER_MACROS_BUILD_DOC)
